// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Provider represents a row from 'public.providers'.
type Provider struct {
	ID                      string  `json:"id"`                        // id
	DrgDefinition           string  `json:"drg_definition"`            // drg_definition
	Name                    string  `json:"name"`                      // name
	StreetAddress           string  `json:"street_address"`            // street_address
	City                    string  `json:"city"`                      // city
	ZipCode                 string  `json:"zip_code"`                  // zip_code
	State                   string  `json:"state"`                     // state
	Hrrd                    string  `json:"hrrd"`                      // hrrd
	TotalDischarges         int16   `json:"total_discharges"`          // total_discharges
	AverageCoveredCharges   float64 `json:"average_covered_charges"`   // average_covered_charges
	AverageTotalPayments    float64 `json:"average_total_payments"`    // average_total_payments
	AverageMedicarePayments float64 `json:"average_medicare_payments"` // average_medicare_payments

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Provider exists in the database.
func (p *Provider) Exists() bool {
	return p._exists
}

// Deleted provides information if the Provider has been deleted from the database.
func (p *Provider) Deleted() bool {
	return p._deleted
}

// Insert inserts the Provider to the database.
func (p *Provider) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.providers (` +
		`id, drg_definition, name, street_address, city, zip_code, state, hrrd, total_discharges, average_covered_charges, average_total_payments, average_medicare_payments` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`)`

	// run query
	XOLog(sqlstr, p.ID, p.DrgDefinition, p.Name, p.StreetAddress, p.City, p.ZipCode, p.State, p.Hrrd, p.TotalDischarges, p.AverageCoveredCharges, p.AverageTotalPayments, p.AverageMedicarePayments)
	err = db.QueryRow(sqlstr, p.ID, p.DrgDefinition, p.Name, p.StreetAddress, p.City, p.ZipCode, p.State, p.Hrrd, p.TotalDischarges, p.AverageCoveredCharges, p.AverageTotalPayments, p.AverageMedicarePayments).Scan(&p.ID)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Provider in the database.
func (p *Provider) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.providers SET (` +
		`drg_definition, name, street_address, city, zip_code, state, hrrd, total_discharges, average_covered_charges, average_total_payments, average_medicare_payments` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) WHERE id = $12`

	// run query
	XOLog(sqlstr, p.DrgDefinition, p.Name, p.StreetAddress, p.City, p.ZipCode, p.State, p.Hrrd, p.TotalDischarges, p.AverageCoveredCharges, p.AverageTotalPayments, p.AverageMedicarePayments, p.ID)
	_, err = db.Exec(sqlstr, p.DrgDefinition, p.Name, p.StreetAddress, p.City, p.ZipCode, p.State, p.Hrrd, p.TotalDischarges, p.AverageCoveredCharges, p.AverageTotalPayments, p.AverageMedicarePayments, p.ID)
	return err
}

// Save saves the Provider to the database.
func (p *Provider) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Provider.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Provider) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.providers (` +
		`id, drg_definition, name, street_address, city, zip_code, state, hrrd, total_discharges, average_covered_charges, average_total_payments, average_medicare_payments` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, drg_definition, name, street_address, city, zip_code, state, hrrd, total_discharges, average_covered_charges, average_total_payments, average_medicare_payments` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.drg_definition, EXCLUDED.name, EXCLUDED.street_address, EXCLUDED.city, EXCLUDED.zip_code, EXCLUDED.state, EXCLUDED.hrrd, EXCLUDED.total_discharges, EXCLUDED.average_covered_charges, EXCLUDED.average_total_payments, EXCLUDED.average_medicare_payments` +
		`)`

	// run query
	XOLog(sqlstr, p.ID, p.DrgDefinition, p.Name, p.StreetAddress, p.City, p.ZipCode, p.State, p.Hrrd, p.TotalDischarges, p.AverageCoveredCharges, p.AverageTotalPayments, p.AverageMedicarePayments)
	_, err = db.Exec(sqlstr, p.ID, p.DrgDefinition, p.Name, p.StreetAddress, p.City, p.ZipCode, p.State, p.Hrrd, p.TotalDischarges, p.AverageCoveredCharges, p.AverageTotalPayments, p.AverageMedicarePayments)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Provider from the database.
func (p *Provider) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.providers WHERE id = $1`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// ProviderByID retrieves a row from 'public.providers' as a Provider.
//
// Generated from index 'workflow_pkey'.
func ProviderByID(db XODB, id string) (*Provider, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, drg_definition, name, street_address, city, zip_code, state, hrrd, total_discharges, average_covered_charges, average_total_payments, average_medicare_payments ` +
		`FROM public.providers ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	p := Provider{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.DrgDefinition, &p.Name, &p.StreetAddress, &p.City, &p.ZipCode, &p.State, &p.Hrrd, &p.TotalDischarges, &p.AverageCoveredCharges, &p.AverageTotalPayments, &p.AverageMedicarePayments)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// ProviderByName retrieves a row from 'public.providers' as a Provider.
//
// Generated from index 'workflow_uname'.
func ProviderByName(db XODB, name string) (*Provider, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, drg_definition, name, street_address, city, zip_code, state, hrrd, total_discharges, average_covered_charges, average_total_payments, average_medicare_payments ` +
		`FROM public.providers ` +
		`WHERE name = $1`

	// run query
	XOLog(sqlstr, name)
	p := Provider{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name).Scan(&p.ID, &p.DrgDefinition, &p.Name, &p.StreetAddress, &p.City, &p.ZipCode, &p.State, &p.Hrrd, &p.TotalDischarges, &p.AverageCoveredCharges, &p.AverageTotalPayments, &p.AverageMedicarePayments)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
